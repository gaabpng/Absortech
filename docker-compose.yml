services:
  absortech-db:
    image: postgres:15-alpine
    container_name: absortech-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - absortech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  absortech-api:
    build:
      context: ./
      dockerfile: dockerfiles/django
    container_name: absortech-api
    environment:
      DB_HOST: absortech-db
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: ${POSTGRES_PORT}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
    expose:
      - "8000"
    depends_on:
      absortech-db:
        condition: service_healthy
    networks:
      - absortech-network
    restart: unless-stopped

  absortech-app:
    build:
      context: ./
      dockerfile: dockerfiles/node
    container_name: absortech-app
    expose:
      - "3000"
    networks:
      - absortech-network
    restart: unless-stopped

  absortech-iot:
    build:
      context: ./
      dockerfile: dockerfiles/iot
    container_name: absortech-iot
    environment:
      DB_HOST: absortech-db
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: ${POSTGRES_PORT}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
    depends_on:
      absortech-db:
        condition: service_healthy
    networks:
      - absortech-network
    restart: unless-stopped
  
  absortech-nginx:
    build:
      context: ./
      dockerfile: dockerfiles/nginx
    container_name: absortech-nginx
    environment:
      - SERVER_NAME=${NGINX_SERVER_NAME}
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./dockerfiles/configfiles/nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./dockerfiles/configfiles/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - absortech-api
      - absortech-app
    networks:
      - absortech-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  absortech-network:
    driver: bridge
